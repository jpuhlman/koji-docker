From d7304f263b60bbac1fef5baf277800f2e8ba57e9 Mon Sep 17 00:00:00 2001
From: "Jeremy A. Puhlman" <jpuhlman@mvista.com>
Date: Sat, 14 Jun 2025 07:29:12 +0000
Subject: [PATCH] Fix building and running with python 3.12

---
 koji.spec        | 15 ++++++++-------
 koji/__init__.py |  2 +-
 koji/daemon.py   |  9 +++++++--
 koji/plugin.py   | 12 +++++++-----
 koji/rpmdiff.py  | 27 ++++++++++++++++++++++++---
 5 files changed, 47 insertions(+), 18 deletions(-)

diff --git a/koji.spec b/koji.spec
index 0d40ac4e..f95c598d 100644
--- a/koji.spec
+++ b/koji.spec
@@ -1,7 +1,8 @@
 %bcond_without python3
-%bcond_without python2
+%bcond_with python2
 %global _python_bytecompile_extra 0
-
+%global __python3 /usr/bin/python3.12
+%global __python /usr/bin/python3.12
 # We can build varying amounts of Koji for python2 and python3 based on
 # the py[23]_support macro values. Valid values are:
 #   undefined or 0 -- do not build
@@ -62,9 +63,8 @@
 %{!?python2_sitearch: %global python2_sitearch %(%{__python2} -c "from distutils.sysconfig import get_python_lib; print(get_python_lib(1))")}
 %{!?py2_build: %global py2_build %{expand: CFLAGS="%{optflags}" %{__python2} setup.py %{?py_setup_args} build --executable="%{__python2} -s"}}
 %{!?py2_install: %global py2_install %{expand: CFLAGS="%{optflags}" %{__python2} setup.py %{?py_setup_args} install -O1 --skip-build --root %{buildroot}}}
-
 # If the definition isn't available for python3_pkgversion, define it
-%{?!python3_pkgversion:%global python3_pkgversion 3}
+%global python3_pkgversion 3.12
 
 %if 0%{?fedora} || 0%{?rhel} >= 7
 %global use_systemd 1
@@ -313,7 +313,6 @@ Requires(post): /sbin/service
 Requires(preun): /sbin/chkconfig
 Requires(preun): /sbin/service
 %endif
-Requires: /usr/bin/cvs
 Requires: /usr/bin/svn
 Requires: /usr/bin/git
 Requires: createrepo >= 0.9.2
@@ -445,7 +444,8 @@ koji-web is a web UI to the Koji system.
 
 %install
 rm -rf $RPM_BUILD_ROOT
-
+mkdir -p $RPM_BUILD_ROOT/usr/lib/python3.12/
+ln -s python3.12 $RPM_BUILD_ROOT/usr/lib/python3.1
 %if 0%{py2_support} < 2  &&  0%{py3_support} < 2
 echo "At least one python must be built with full support"
 exit 1
@@ -506,7 +506,8 @@ for fn in $extra_dirs ; do
 done
 %endif
 %endif
-
+rm -f $RPM_BUILD_ROOT/usr/lib/python3.1
+find $RPM_BUILD_ROOT | xargs grep /usr/bin/python2 | cut -d : -f 1 | xargs sed -e "s,/usr/bin/python2,/usr/bin/python3,g" -i
 %clean
 rm -rf $RPM_BUILD_ROOT
 
diff --git a/koji/__init__.py b/koji/__init__.py
index c05cc1b6..b1dfe3ee 100644
--- a/koji/__init__.py
+++ b/koji/__init__.py
@@ -28,7 +28,7 @@ import base64
 import datetime
 import errno
 import hashlib
-import imp
+import importlib as imp
 import logging
 import logging.handlers
 import optparse
diff --git a/koji/daemon.py b/koji/daemon.py
index 4798500c..4b787f4a 100644
--- a/koji/daemon.py
+++ b/koji/daemon.py
@@ -158,7 +158,10 @@ def log_output(session, path, args, outfile, uploadpath, cwd=None, logerror=0, a
         outfd = None
         remotename = os.path.basename(outfile)
         while True:
-            status = os.waitpid(pid, os.WNOHANG)
+            try:
+               status = os.waitpid(pid, os.WNOHANG)
+            except ChildProcessError:
+               return 0
             time.sleep(1)
 
             if not outfd:
@@ -561,8 +564,10 @@ class SCM(object):
             cmd = ['git', 'rev-parse', 'HEAD']
             proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                                     cwd=self.sourcedir,)
-            out, _ = proc.communicate()
+            out, err = proc.communicate()
             status = proc.wait()
+            print (out)
+            print (err)
             if status != 0:
                 raise koji.GenericError('Error getting commit hash for git')
             fragment = out.strip()
diff --git a/koji/plugin.py b/koji/plugin.py
index a3022e3c..5b3025f9 100644
--- a/koji/plugin.py
+++ b/koji/plugin.py
@@ -21,7 +21,8 @@
 
 from __future__ import absolute_import
 
-import imp
+import importlib
+import importlib.machinery
 import logging
 import sys
 import traceback
@@ -82,15 +83,16 @@ class PluginTracker(object):
             path = self.searchpath
         if path is None:
             raise koji.PluginError("empty module search path")
-        file, pathname, description = imp.find_module(name, self.pathlist(path))
         try:
-            plugin = imp.load_module(mod_name, file, pathname, description)
+            orig_spec = importlib.machinery.PathFinder().find_spec(name, self.pathlist(path))
+            plugin_spec = importlib.util.spec_from_file_location(mod_name, orig_spec.origin)
+            plugin = importlib.util.module_from_spec(plugin_spec)
+            sys.modules[mod_name] = plugin
+            plugin_spec.loader.exec_module(plugin)
         except Exception:
             msg = 'Loading plugin %s failed' % name
             logging.getLogger('koji.plugin').error(msg)
             raise
-        finally:
-            file.close()
         self.plugins[name] = plugin
         return plugin
 
diff --git a/koji/rpmdiff.py b/koji/rpmdiff.py
index fdd34afc..418baffb 100644
--- a/koji/rpmdiff.py
+++ b/koji/rpmdiff.py
@@ -116,9 +116,30 @@ class Rpmdiff:
             self.__comparePRCOs(old, new, tag)
 
         # compare the files
-
-        old_files_dict = self.__fileIteratorToDict(old.fiFromHeader())
-        new_files_dict = self.__fileIteratorToDict(new.fiFromHeader())
+        # reconstruct the iterator from header tags (RPM 4.18+)
+        fnames = old[rpm.RPMTAG_BASENAMES]
+        dnames = old[rpm.RPMTAG_DIRNAMES]
+        modes  = old[rpm.RPMTAG_FILEMODES]
+        states = old[rpm.RPMTAG_FILESTATES]
+        vflgs  = old[rpm.RPMTAG_FILEVERIFYFLAGS]
+        lnks   = old[rpm.RPMTAG_FILELINKTOS]
+        flags  = old[rpm.RPMTAG_FILEFLAGS]
+        old_iter = zip(
+            (os.path.join(dnames[i], fnames[i]) for i in range(len(fnames))),               modes, states, vflgs, lnks, flags
+            )
+        old_files_dict = self.__fileIteratorToDict(old_iter)
+        # reconstruct the iterator from header tags (RPM 4.18+)
+        fnames = new[rpm.RPMTAG_BASENAMES]
+        dnames = new[rpm.RPMTAG_DIRNAMES]
+        modes  = new[rpm.RPMTAG_FILEMODES]
+        states = new[rpm.RPMTAG_FILESTATES]
+        vflgs  = new[rpm.RPMTAG_FILEVERIFYFLAGS]
+        lnks   = new[rpm.RPMTAG_FILELINKTOS]
+        flags  = new[rpm.RPMTAG_FILEFLAGS]
+        new_iter = zip(
+            (os.path.join(dnames[i], fnames[i]) for i in range(len(fnames))) ,               modes, states, vflgs, lnks, flags
+            )
+        new_files_dict = self.__fileIteratorToDict(new_iter)
         files = sorted(set(itertools.chain(six.iterkeys(old_files_dict),
                                            six.iterkeys(new_files_dict))))
         self.old_data['files'] = old_files_dict
-- 
2.47.1

